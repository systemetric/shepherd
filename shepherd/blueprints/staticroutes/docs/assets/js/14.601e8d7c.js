(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{192:function(t,s,e){"use strict";e.r(s);var n=e(0),a=Object(n.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),e("p",[t._v("GPIO, or General Purpose Input Output, is the main way you'll interface with simple or obscure bits of hardware. This tutorial will introduce the GPIO system and how to use it.")]),t._v(" "),t._m(1),t._v(" "),e("p",[t._v('On the side of your BrainBox, there are 4 regular pins and a "+5V" and "-" pin. The top of the BrainBox labels which pin corresponds to which number. Different devices need to be plugged into different pins.')]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),e("p",[t._v("Try using a loop to make the light turn on and off every 2 seconds. You'll need the time library from the motors exercise.")]),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._m(9),t._v(" "),e("p",[t._v("Try making a light turn on or off depending on if a button is pressed. An explanation of why it is needed to use "),e("code",[t._v("INPUT_PULLUP")]),t._v(" can be found in the "),e("router-link",{attrs:{to:"/gpio.html#pull-ups"}},[t._v("GPIO documentation")]),t._v(".")],1),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._m(13),t._v(" "),e("p",[t._v("You can also use retroreflective sensors with your robot's GPIO. This can be configured in the code as follows:")]),t._v(" "),t._m(14),t._m(15)])}),[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"gpio"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gpio","aria-hidden":"true"}},[this._v("#")]),this._v(" GPIO")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"gpio-pins"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gpio-pins","aria-hidden":"true"}},[this._v("#")]),this._v(" GPIO Pins")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"led-output"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#led-output","aria-hidden":"true"}},[this._v("#")]),this._v(" LED Output")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("TIP")]),this._v(" "),s("p",[this._v("GPIO outputs are already protected by a 1k Ohm current limiting resistor, you can connect LEDs directly!")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("If you want to put an LED on your robot, for testing or just for looks, you'll need to plug the short side of the LED into the "),s("code",[this._v("-")]),this._v(" (ground) pin, and the long side of the LED into any regular pin (such as 1). Then, use the following code to set up the pin in "),s("code",[this._v("OUTPUT")]),this._v(" mode and turn the LED on:")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" robot\nR "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" robot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Robot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If you're not using GPIO pin 1, change this number to whatever pin you're using.")]),t._v("\nR"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gpio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mode "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" robot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OUTPUT\nR"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gpio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("digital "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"buttons"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#buttons","aria-hidden":"true"}},[this._v("#")]),this._v(" Buttons")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("While your robot hopefully won't be colliding with much, buttons are a good way for a robot to know if it's driven into something. Buttons should be plugged into the - pin and a regular pin (such as 0). Using the "),s("code",[this._v("INPUT_PULLUP")]),this._v(" mode, you can detect when a button is pressed.")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" robot\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" time\nR "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" robot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Robot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If you're not using GPIO pin 0, change this number to whatever pin you're using.")]),t._v("\nR"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gpio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mode "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" robot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("INPUT_PULLUP\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" R"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gpio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("digital"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Pressed"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Not Pressed"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    time"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sleep"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("Note that "),e("code",[t._v("INPUT_PULLUP")]),t._v(" returns inverted values - "),e("code",[t._v("True")]),t._v(" when it isn't pressed and "),e("code",[t._v("False")]),t._v(" when it is. This means we use "),e("code",[t._v("not")]),t._v(" to invert the output we get back to something more sensible for our use.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"potentiometers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#potentiometers","aria-hidden":"true"}},[this._v("#")]),this._v(" Potentiometers")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Another form of input is a potentiometer or a variable resistor. Potentiometers should be plugged into the +5V, a regular pin (such as 3) and the - pin. Using "),s("code",[this._v("INPUT_ANALOG")]),this._v(" mode, you can read the voltage output of the resistor (between 0V and 5V).")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" robot\n\nR "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" robot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Robot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nPOT_PIN "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\nR"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gpio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("POT_PIN"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mode "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" robot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("INPUT_ANALOG\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("R"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gpio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("POT_PIN"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("analog"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"using-sensors-with-retroreflective-tape"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-sensors-with-retroreflective-tape","aria-hidden":"true"}},[this._v("#")]),this._v(" Using sensors with retroreflective tape")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" robot\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" time\n\nR "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" robot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Robot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nR"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gpio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mode "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" robot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("INPUT\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" R"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gpio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("digital"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Reflecting!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    time"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sleep"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("This is a piece of code, that when run, should detect things very close to the sensor, or reflective objects further away (such as the retroreflective tape in the arena)."),s("br"),this._v("\nNote that the detector also returns "),s("code",[this._v("False")]),this._v(" when it detects something, so "),s("code",[this._v("not")]),this._v(" is used. Retroreflective tape is used in the arena to mark the borders of each quadrant. Using a sensor like this facing downwards can allow your robot to detect when it passes into a new quadrant. This could be used for a whole variety of helpful tasks when navigating the arena. We look forward to seeing your creativity!")])}],!1,null,null,null);s.default=a.exports}}]);